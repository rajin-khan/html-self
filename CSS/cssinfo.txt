T1 (PROVIDING CSS)

There are three different ways to providing css in webpages.

embedded stylesheets (when you put the style section directly in the html)
problems: not scalable, violates separation of concerns.

external stylesheets (separate css files)
more preferred.

inline styles (applied directly to a particular html element)

you can call the external style sheets anything, the name doesn't matter. However, styles.css is pretty common.
so, we don't have to create a separate style element in the html doc, just create a .css stylesheet, and then in the html doc head section,
use the <link/> (self closing tag) and add the .css file in href. the rel attribute is just what you describe the file to be that is related.

now, should we never use embedded styles?
no, that's not the case. sometimes you may want to override your external stylesheet rules.
so, even after linking, you can create a new <style> element and override the external stylesheet rules.

now, we've seen how embedded style overrides external stylesheets, but even overriding that is the inline styles.

every single html element has it's own style attribute.
so, for example, you could take the <p> element, and add <p style= ""> to add embedded styles.
AVOID THIS AS MUCH AS POSSIBLE. better to use unique identifiers.

so for <p>, add: <p id="first">, then use #first in the style part to just edit the first paragraph.

T2

NORMALIZING CSS:

different browsers render some html elements differently. 
to address this issue, we use a very popular stylesheet called Normalize.css
it provides the basic style for some default html elements so they look the same across all browsers.
link to dl: https://necolas.github.io/normalize.css/
you want to include the normalize stylesheet for every website you make, and link to that normalize.css stylesheet (first) separately too,
to ensure everything looks like the standard.
normalization will take away the margin property of the body element, so you may have to reset it in styles.css

usually, when using stylesheets, it's better to create a separate folder for css and then store the stylesheets there.

T3

SELECTORS IN CSS:

we can select things in css by their:

type (simply stating like head, body, etc).
id (selected in css by a # sign) [we cannot have multiple elements with the same id]
class (selected using a . sign) [we can have multiple elements with the same class]
attribute (not that common, but selected by using a square bracket) [putting *= checks for the existence of an item, ^= checks if the matching attribute
starts with that item, $=checks if the matching attribute ends with that item.]

we can generate an element with a specific id by using the shortcut: element#nameofid
for example: section#product would create: <section id="products"></section>
we can generate an element with a specific class by using the shortcut: element.nameofclass*numberofobjectsinthatclass
for example: article.products*3 gives:
        <article class="product"></article>
        <article class="product"></article>
        <article class="product"></article>


T4

RELATIONAL SELECTORS:

inside a specific section that you have assigned an id to like this,

<section id="products">
        <p>Lorem ipsum dolor sit amet.</p>
    </section>

you can add a relational selector in the styles sheet by using this:

#products p {

    color: orange;
}

and this will apply it to all paragraphs in the products section.

now what if you have paragraphs in a different part of the section? like this:

<section id="products">
        <p>Lorem ipsum dolor sit amet.</p>
        <article>
            <p>Lorem ipsum dolor sit amet.</p>
        </article>
    </section>

then to apply the style to only the first paragraph, the "direct child" of the section, you have to use the > sign.

#products > p {

    color: orange;
}

if we have something like this:

<section id="products">
        <p>Lorem ipsum dolor sit amet.</p>
        <article>
            <p>Lorem ipsum dolor sit amet.</p>
        </article>
    </section>
    <p>Lorem ipsum dolor sit amet.</p>

this paragraph that comes immediately after the products section is called the sibling of the section.
to apply the style to this paragraph only, we use the + sign:

#products + p {

    color: orange;
}

now if you want to select ANY and all paragraphs that come after the products section, just use the ~ sign.

however, relational selectors can be fragile, and not as fast as basic selectors.