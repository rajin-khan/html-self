T1 (PROVIDING CSS)

There are three different ways to providing css in webpages.

embedded stylesheets (when you put the style section directly in the html)
problems: not scalable, violates separation of concerns.

external stylesheets (separate css files)
more preferred.

inline styles (applied directly to a particular html element)

you can call the external style sheets anything, the name doesn't matter. However, styles.css is pretty common.
so, we don't have to create a separate style element in the html doc, just create a .css stylesheet, and then in the html doc head section,
use the <link/> (self closing tag) and add the .css file in href. the rel attribute is just what you describe the file to be that is related.

now, should we never use embedded styles?
no, that's not the case. sometimes you may want to override your external stylesheet rules.
so, even after linking, you can create a new <style> element and override the external stylesheet rules.

now, we've seen how embedded style overrides external stylesheets, but even overriding that is the inline styles.

every single html element has it's own style attribute.
so, for example, you could take the <p> element, and add <p style= ""> to add embedded styles.
AVOID THIS AS MUCH AS POSSIBLE. better to use unique identifiers.

so for <p>, add: <p id="first">, then use #first in the style part to just edit the first paragraph.

T2

NORMALIZING CSS:

different browsers render some html elements differently. 
to address this issue, we use a very popular stylesheet called Normalize.css
it provides the basic style for some default html elements so they look the same across all browsers.
link to dl: https://necolas.github.io/normalize.css/
you want to include the normalize stylesheet for every website you make, and link to that normalize.css stylesheet (first) separately too,
to ensure everything looks like the standard.
normalization will take away the margin property of the body element, so you may have to reset it in styles.css

usually, when using stylesheets, it's better to create a separate folder for css and then store the stylesheets there.

T3

SELECTORS IN CSS:

we can select things in css by their:

type (simply stating like head, body, etc).
id (selected in css by a # sign) [we cannot have multiple elements with the same id]
class (selected using a . sign) [we can have multiple elements with the same class]
attribute (not that common, but selected by using a square bracket) [putting *= checks for the existence of an item, ^= checks if the matching attribute
starts with that item, $=checks if the matching attribute ends with that item.]

we can generate an element with a specific id by using the shortcut: element#nameofid
for example: section#product would create: <section id="products"></section>
we can generate an element with a specific class by using the shortcut: element.nameofclass*numberofobjectsinthatclass
for example: article.products*3 gives:
        <article class="product"></article>
        <article class="product"></article>
        <article class="product"></article>


T4

RELATIONAL SELECTORS:

inside a specific section that you have assigned an id to like this,

<section id="products">
        <p>Lorem ipsum dolor sit amet.</p>
    </section>

you can add a relational selector in the styles sheet by using this:

#products p {

    color: orange;
}

and this will apply it to all paragraphs in the products section.

now what if you have paragraphs in a different part of the section? like this:

<section id="products">
        <p>Lorem ipsum dolor sit amet.</p>
        <article>
            <p>Lorem ipsum dolor sit amet.</p>
        </article>
    </section>

then to apply the style to only the first paragraph, the "direct child" of the section, you have to use the > sign.

#products > p {

    color: orange;
}

if we have something like this:

<section id="products">
        <p>Lorem ipsum dolor sit amet.</p>
        <article>
            <p>Lorem ipsum dolor sit amet.</p>
        </article>
    </section>
    <p>Lorem ipsum dolor sit amet.</p>

this paragraph that comes immediately after the products section is called the sibling of the section.
to apply the style to this paragraph only, we use the + sign:

#products + p {

    color: orange;
}

now if you want to select ANY and all paragraphs that come after the products section, just use the ~ sign.

however, relational selectors can be fragile, and not as fast as basic selectors.


T5

PSEUDO-CLASS SELECTORS:

when we assign items a class, it can become tedious to separately define names for each class.
sometimes, it is easier to use pseudo classes to refer to different items.
for example, say we have:

<body>
    <article>
        <h2>Heading</h2>
        <p>Lorem ipsum dolor sit amet.</p>
        <p>Lorem ipsum dolor sit amet.</p>
    </article>
</body>

in the stylesheet, we can use the ":" operator to access pseudo classes, like so:

article :first-child {

    //formatting;
}

first child will refer to h2, as in the first child element of the article. (a little fragile, as the first element may change according to us)

article :first-of-type {

    //formatting;
}

first of type refers to the first appearance of any kind of child element of different types the article part.

if you want the rule applied to the first paragraph of the article, use this:

article p:first-of-type {

    //formatting;
}

similarly, last-child and last-of-type are other pseudo-class selectors.

new shorthand: say we wanna create an unordered list with 5 list elements, each of them saying item 1, item 2, and so on
we could write it like this: ul>li*5{Item $}
and then we'd get:
<ul>
    <li>Item 1</li>
    <li>Item 2</li>
    <li>Item 3</li>
    <li>Item 4</li>
    <li>Item 5</li>
</ul>

another pseudo class selector is the nth-child selector, which acts like a function and lets you select, for example every even or odd child element
in, say, an unordered list.

ul li:nth-child(*) {

    //formatting
}

IN THE * part, you can put in even, odd, or formulas like 3n for every 3rd element, and so on and so forth.

there are specific selectors for hyperlinks as well (the anchor [<a>] tag). for example, to change the color of a visited link, you can:

a:visited {

    color: gray;
}

(no spaces in between a, the colon, or the "visited" part)

and to change the color of all links, visited or unvisited, you can use:

a:link {

    color: cyan;
}

and to change the hover effect, you can use:

a:hover {

    color: pink
}

now, keep in mind, the hover pseudo class can be used ANYWHERE when the user hovers over ANYTHING. doesn't necessarily have to be just links.
you can use the hover effect on a section, an article, a div, absolutely anwhere.
do keep in mind that the hover effect must come at the LAST part, or it won't work.

now, some users like to use their keyboard when navigating websites (by pressing tab). but the hover pseudo selector doesn't handle that.
so, as best practice, whenever we use the hover selector, we should also use the focus selector, like this:

a:hover, 
a:focus {

    color: pink
}

T6

PSEUDO ELEMENT SELECTORS:

sometimes we wanna style just the part of an element, not the entire element itself. this is where we use pseudo-element selectors.
whereas pseudo selectors use the ":" operator, pseudo class selectors use the "::" operator.

an example would be, say, in a paragraph element, we wanna style the first letter.
we could achieve this by using a span, assigning it a class, and then referring to that class in the css, like this:

<p>
    <span class="first-letter">L</span>orem ipsum dolor sit amet consectetur adipisicing elit.
</p>

in the css:

.first-letter {

    //formatting;
}

however, this is kind of pointless here because we have a pseudo element selector for this very purpose. it works like this:

<p>
    Lorem ipsum dolor sit amet consectetur adipisicing elit.
</p>

in the css:

p::first-letter {

    //formatting;
}

here, the :: is being used to access the pseudo element selector first-letter.

another pseudo element selector is for the first line of a paragraph, called first-line.
again, that would work like this:

p::first-line {

    //formatting;
}

now, this might not seem very useful, but pseudo element selectors come in most handy when you're trying to change the color of, say, the selected portion
of a part of your website. for example, if we wanted to change the color of the paragrap's highlighted text when selected, we'd do this:

p::selection {

    background-color: pink;
}

however, this rule would only apply to the paragraph. to make it work for any and all selections on the website, we'd just do this:

::selection {

    background-color: pink;
}

another pseudo element selector is the before, and after element. say, before/after every paragraph, we wanted to insert an ellipsis. we'd do it like this:

p::before {

    content: "...";
    display: block; (converts the ellipsis to a block level element[takes up the entire space] rather than an inline element)
}

but keep in mind, if you use before, then that before becomes the element that first-line/first-letter will target.
or,

p::after {

    content: "...";
    display: block;
}

T7

SELECTOR SPECIFITY

if you use multiple selectors to select the same target, the order of specifity will go like this (in order of decreasing priority):

- ID SELECTOR (#)
- CLASS & ATTRIBUTE SELECTORS (.)
- ELEMENT SELECTOR (h1, p, article, etc.)

if you have selectors with the same level of specificity, the one that comes last will be applied.

to overcome specifity, say in a situation like this:

index.html:
<h1 id="products" class="highlight">Heading</h1>

styles.css:
h1 {

    color: dodgerblue !important;
}

.highlight {

    color: deeppink;
}

#products {

    color: green
}

we want to use the !important keyword to ensure a specific property sticks, despite being overriden in specifity priority.
while this may be an easy solution, we should avoid it as much as possible. it is considered a very bad practice.

to explain the better solution, we have to know a few things.

if you hover over a specific selector, you can see its priority in vscode. it looks like this:
(0,0,0) [read as the decimal 000]

the first position is to indicate the number of ID selectors, (1/0)
the second position is to indicate the number of class/attribute selectors, (1/0)
the third position is to indicate the number of element selectors, (1/0)

now, for this example:

h1 { //(0,0,1) priority [read as decimal 001]

    color: dodgerblue;
}

.highlight { //(0,1,0) priority [read as decimal 010]

    color: deeppink;
}

#products { //(1,0,0) priority [read as decimal 100]

    color: green
}

if we want the color to be blue, what we can do is create a new selector with a higher priority.

so,

.highlight#products { //(1,1,0) priority [read as decimal 110]

    color: dodgerblue
}

this has higher priority, so this rule will be applied.

or, we could apply:

h1#products { //(1,0,1) priority [read as decimal 101]

    color: dodgerblue
}

this also has higher priority, so this rule will be applied.

however, don't go overboard with specificity. gets hard to maintain.


T8

INHERITANCE

generally speaking, most properties that make sense are inherited. like most typography rules.

<p>Lorem ipsum <strong>dolor</strong> sit amet.</p>

here, strong would inherit most of the properties of paragraph, like color, font, etc.

however, say you want to ignore the color of the paragraph. then you would do this in the .css file:

p {

    color: dodgerblue;
    border: 1px solid black;
}

strong {

    color: initial;
    border: inherit;
}

here, the color of the strong element is set to initial. then, the border property is not inherited by default, so we force it to inherit it.

T9

COLORS

in css, we can define colors by:

- NAME 
- RGB values
- HSL values (hue, saturation, lightness)
- HEXADECIMAL values

just google color picker and you'll find a very nice color picker from google.

you can set colors using rgb values with the rgb() function, like this:

.box {

    width: 200px;
    height: 200px;
    background-color: rgb(255, 221, 71);
}

you can also use the rgba() function, which just takes one more extra decimal number between 0-1 to indicate opacity.

.box {

    width: 200px;
    height: 200px;
    background-color: rgba(255, 221, 71, 0.5);
}

you can set colors using hex values without any function, just the hex value itself, like this:

.box {

    width: 200px;
    height: 200px;
    background-color: #ffdd47;
}

however, opacity cannot be set using hex values, ONLY rgba can do that.

you can set colors using hsl values with the hsl() function, like this: (remember to remove the degree character from the first value)

.box {

    width: 200px;
    height: 200px;
    background-color: hsl(39, 100%, 64%); //(first value is the position on the color wheel, the second value is the saturation, the third value is the brightness value.)
}

instead of separating values by comma in the hsl() function, you could've also written: hsl(39deg 100% 64%)

similar to rgba, you can also use the hsla() function, which just takes one more extra decimal number between 0-1 to indicate opacity.

.box {

    width: 200px;
    height: 200px;
    background-color: hsl(39, 100%, 64%, 0.9);
}


T10

GRADIENTS

so, from the previous T9 example, let's use the .box:

.box {

    width: 200px;
    height: 200px;
    background: hsl(39, 100%, 64%, 0.9);
}

here, we cannot set a background-color property, because a gradient is an image. so need to either use background-image, or the shorthand, just "background".

to use the gradient, we call the linear-gradient() function.
it takes a lot of arguments.

first off, it can take, simply, two colors (by name, rgb, hsl, hex, etc.) like this:

- linear-gradient(dodgerblue, yellow); //makes it appear from top to bottom.

we can also supply the direction of the gradient, with another argument before colors:

- linear-gradient(to right, dodgerblue, yellow); //makes it appear from left to right. you can add "to" and then directions like left, right, top left, bottom right, you get the idea.

we can also supply the direction of the gradient with degrees to be more precise, also with another argument before colors:

- linear-gradient(45deg, dodgerblue, yellow); //north is considered 0deg

we can also specify a % of space a color should begin from, like this:

- linear-gradient(45deg, dodgerblue, yellow 30%); //meaning yellow should start at about 30% of the available space, meaning more yellow. 90% would mean less yellow.

we can even supply a third color, like this: (or as many colors as you want, honestly)

- linear-gradient(45deg, dodgerblue, yellow, tomato);


in css, we also have radial gradient.

the radial-gradient() function can take two colors:

radial-gradient(white, yellow); //the first color is placed in the center.

now, if we change the dimensions of the box, the radial gradient would look like an ellipse/sth different.
we can make it look like a circle regardless of the dimension of the background by passing the argument "circle" before colors.

radial-gradient(circle, white, yellow);

we can also change the position of this circle, by using the "at" keyword, and give it the position, like:

radial-gradient(circle at top left, white, yellow);

again, you can supply as many colors as you want in the argument.

however, there are tools available online to generate gradients and provide us with the css for it, like this:
https://cssgradient.io/

for example, this is a css line generated from that website:

background: rgb(88,42,138);
background: linear-gradient(274deg, rgba(88,42,138,1) 0%, rgba(236,111,24,1) 100%);

why do we have a background property of just one color? well, most browsers support css, but in the case one doesn't, it falls back on that color.


T11: BORDERS


so, going back to our box, we can see that the border property takes three values:

border: 10px solid royalblue; //the width, the style(solid, dotted, dashed, etc [others styles exist]), the color(can be rgb, hex, named, anything)

however, this border property is a shorthand property. it applies them to all sides. in css, we have full control and can apply them to each side.
for example, we can separately assign properties to:

border-top: 10px, solid, royalblue;
border-right: 10px, solid, royalblue;
border-bottom: 10px, solid, royalblue;
border-left: 10px, solid, royalblue;

now, the order in which you write border rules matter. whichever comes last is kept in mind.

also, border-width property assigns values in this order:

border-width: 10px, 20px, 10px, 20px; //TOP, RIGHT, BOTTOM, LEFT (clockwise).

however, if you remove the rule for the left border, the browser automatically applies the border rule of the left border.
similarly, if you remove the rule for the bottom border, the browser auto-applies the rule for the top border.

so, writing:
border-width: 10px, 20px, 10px, 20px;
is the same as writing:
border-width: 10px, 20px;

- comments are written in css in /* comment */

we can separately apply properties like,

border-style: //;
border-color: //;

most of the time, we use the shorthand, but this is all good to know.

however, an important property that exists is border-radius. it helps to make our border round.

border-radius: 10px; //round corners.
border radius: 50px; //even more rounded corners.
border radius: half-the-length/width; //circle (only for a square with length/width equal)

we can create other shapes in css like triangle, stars, and so on. we can just look them up online. a useful link is:

https://css-tricks.com/the-shapes-of-css/


T12: SHADOWS

again, using the same box element,
for shadows, we can add shadows using the box-shadow property:

box-shadow: 10px 10px 30px grey; //right-left-value (positive: right, negative, like -10px: left), down-up-value (positive: down, negative: up), blend value, color

here, instead of using a solid color, most times, it's much better to just use an rgba and suppply the shadow color 
and set the opacity to 0-1 (maybe 0.5) like this:

box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.5) // (0, 0, 0) = rgb for pure black the decimal later is the opacity.

furthermore, most times, when creating shadows, it's best to not move it left or right (aesthetic purposes), so we just supply 0px and 0px first.

there also exists a text-shadow property. say you have a heading in the box, then in the h1 styling element, you'd write:

text-shadow: 3px 3px 5px rgba(0, 0, 0, 0.2); //exactly the same kind of values as the box-shadow function, like: horizontal, vertical, blend, color.